#!/usr/bin/env python
#
# Version: 0.2.2
import paho.mqtt.client as mqtt
import re
import sys
from datetime import timedelta
from datetime import datetime
################################################################
# Please configure the following settings for your environment

MQTT_SERVER = "gpssensor.ddns.net"
MQTT_PORT = 1883
MQTT_ALIVE = 90
MQTT_TOPIC = "LASS/Test/#"
SERIALPORT="/dev/ttyS0"
BUADRATE=57600
################################################################

  


# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print("MQTT Connected with result code "+str(rc))

    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe(MQTT_TOPIC)

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    #print("mqtt payload=%s" %(msg.payload))
    items = re.split('\|',str(msg.payload))
    flag = 0
    global value_gps_lat
    global value_gps_lon
    global value_dust
    global value_humidity
    global value_temperature
    global str_date
    global str_time
    global LASS_DEVICE_ID
    for item in items:
        if item == '':
            continue 
        pairs = re.split('=',item)
        if (len(items)==1):
            continue
        flag = 1
        if (pairs[0] == "device_id"):
            if (pairs[1] != LASS_DEVICE_ID):
                return
            else:
                print("Got your MQTT channel")
                print(msg.topic +msg.payload+'\r\n')
                #if USE_FRIEND:
                #    s.write(msg.topic +msg.payload+'\n')
        elif (pairs[0] == "s_d0"):
            value_dust = pairs[1]
        elif (pairs[0] == "s_t0"):
            value_temperature = pairs[1]
        elif (pairs[0] == "s_h0"):
            value_humidity = pairs[1]
        elif (pairs[0] == "date"):
            str_date = pairs[1]
        elif (pairs[0] == "time"):
            str_time = pairs[1]
        elif (pairs[0] == "gps_lat"):
            value_gps_lat == pairs[1]
        elif (pairs[0] == "gps_lon"):
            value_gps_lon == pairs[1]
    if (flag==0):
        return
    if USE_FRIEND:
        strt="date="+str_date+'|time='+str_time
        dt2=datetime.strptime(strt, "date=%Y-%m-%d|time=%H:%M:%S")
        dt2=dt2+timedelta(hours=8, minutes=0)
        dt3s =dt2.strftime("date=%Y-%m-%d|time=%H:%M:%S")
        msg.payload=msg.payload.replace(strt,dt3s)
        s.write(msg.topic +msg.payload+'\n')
        print msg.topic +msg.payload+'\n'
   
def main():
   
    ######END MODE SELECT#######################
    mqtt_client = mqtt.Client()
    mqtt_client.on_connect = on_connect
    mqtt_client.on_message = on_message
    mqtt_notconnected=1
    while(True):
        try:
            if mqtt_notconnected:
                    print "Trying To Connect:"+MQTT_SERVER
                    mqtt_client.connect(MQTT_SERVER, MQTT_PORT, MQTT_ALIVE)
            mqtt_notconnected=0
            mqtt_client.loop_forever()
        except:
           print "Network not exist..wait 5 second"
           sleep(5)
